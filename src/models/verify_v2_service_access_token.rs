/*
 * Twilio - Verify
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct VerifyV2ServiceAccessToken {
    /// A 34 character string that uniquely identifies this Access Token.
    #[serde(rename = "sid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sid: Option<Option<String>>,
    /// The unique SID identifier of the Account.
    #[serde(rename = "account_sid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub account_sid: Option<Option<String>>,
    /// The unique SID identifier of the Verify Service.
    #[serde(rename = "service_sid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub service_sid: Option<Option<String>>,
    /// The unique external identifier for the Entity of the Service.
    #[serde(rename = "entity_identity", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub entity_identity: Option<Option<String>>,
    #[serde(rename = "factor_type", skip_serializing_if = "Option::is_none")]
    pub factor_type: Option<models::AccessTokenEnumFactorTypes>,
    /// A human readable description of this factor, up to 64 characters. For a push factor, this can be the device's name.
    #[serde(rename = "factor_friendly_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub factor_friendly_name: Option<Option<String>>,
    /// The access token generated for enrollment, this is an encrypted json web token.
    #[serde(rename = "token", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub token: Option<Option<String>>,
    /// The URL of this resource.
    #[serde(rename = "url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub url: Option<Option<String>>,
    /// How long, in seconds, the access token is valid. Max: 5 minutes
    #[serde(rename = "ttl", skip_serializing_if = "Option::is_none")]
    pub ttl: Option<i32>,
    /// The date that this access token was created, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
    #[serde(rename = "date_created", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<Option<String>>,
}

impl VerifyV2ServiceAccessToken {
    pub fn new() -> VerifyV2ServiceAccessToken {
        VerifyV2ServiceAccessToken {
            sid: None,
            account_sid: None,
            service_sid: None,
            entity_identity: None,
            factor_type: None,
            factor_friendly_name: None,
            token: None,
            url: None,
            ttl: None,
            date_created: None,
        }
    }
}

