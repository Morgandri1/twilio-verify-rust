/*
 * Twilio - Verify
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct VerifyV2ServiceWebhook {
    /// The unique string that we created to identify the Webhook resource.
    #[serde(rename = "sid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sid: Option<Option<String>>,
    /// The unique SID identifier of the Service.
    #[serde(rename = "service_sid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub service_sid: Option<Option<String>>,
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Service resource.
    #[serde(rename = "account_sid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub account_sid: Option<Option<String>>,
    /// The string that you assigned to describe the webhook. **This value should not contain PII.**
    #[serde(rename = "friendly_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<Option<String>>,
    /// The array of events that this Webhook is subscribed to. Possible event types: `*, factor.deleted, factor.created, factor.verified, challenge.approved, challenge.denied`
    #[serde(rename = "event_types", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub event_types: Option<Option<Vec<String>>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<models::WebhookEnumStatus>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<models::WebhookEnumVersion>,
    /// The URL associated with this Webhook.
    #[serde(rename = "webhook_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub webhook_url: Option<Option<String>>,
    #[serde(rename = "webhook_method", skip_serializing_if = "Option::is_none")]
    pub webhook_method: Option<models::WebhookEnumMethods>,
    /// The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
    #[serde(rename = "date_created", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<Option<String>>,
    /// The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
    #[serde(rename = "date_updated", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub date_updated: Option<Option<String>>,
    /// The absolute URL of the Webhook resource.
    #[serde(rename = "url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub url: Option<Option<String>>,
}

impl VerifyV2ServiceWebhook {
    pub fn new() -> VerifyV2ServiceWebhook {
        VerifyV2ServiceWebhook {
            sid: None,
            service_sid: None,
            account_sid: None,
            friendly_name: None,
            event_types: None,
            status: None,
            version: None,
            webhook_url: None,
            webhook_method: None,
            date_created: None,
            date_updated: None,
            url: None,
        }
    }
}

