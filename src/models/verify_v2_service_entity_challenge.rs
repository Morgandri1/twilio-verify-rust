/*
 * Twilio - Verify
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct VerifyV2ServiceEntityChallenge {
    /// A 34 character string that uniquely identifies this Challenge.
    #[serde(rename = "sid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sid: Option<Option<String>>,
    /// The unique SID identifier of the Account.
    #[serde(rename = "account_sid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub account_sid: Option<Option<String>>,
    /// The unique SID identifier of the Service.
    #[serde(rename = "service_sid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub service_sid: Option<Option<String>>,
    /// The unique SID identifier of the Entity.
    #[serde(rename = "entity_sid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub entity_sid: Option<Option<String>>,
    /// Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
    #[serde(rename = "identity", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub identity: Option<Option<String>>,
    /// The unique SID identifier of the Factor.
    #[serde(rename = "factor_sid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub factor_sid: Option<Option<String>>,
    /// The date that this Challenge was created, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
    #[serde(rename = "date_created", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<Option<String>>,
    /// The date that this Challenge was updated, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
    #[serde(rename = "date_updated", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub date_updated: Option<Option<String>>,
    /// The date that this Challenge was responded, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
    #[serde(rename = "date_responded", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub date_responded: Option<Option<String>>,
    /// The date-time when this Challenge expires, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. The default value is five (5) minutes after Challenge creation. The max value is sixty (60) minutes after creation.
    #[serde(rename = "expiration_date", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub expiration_date: Option<Option<String>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<models::ChallengeEnumChallengeStatuses>,
    #[serde(rename = "responded_reason", skip_serializing_if = "Option::is_none")]
    pub responded_reason: Option<models::ChallengeEnumChallengeReasons>,
    /// Details provided to give context about the Challenge. Intended to be shown to the end user.
    #[serde(rename = "details", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub details: Option<Option<serde_json::Value>>,
    /// Details provided to give context about the Challenge. Intended to be hidden from the end user. It must be a stringified JSON with only strings values eg. `{\"ip\": \"172.168.1.234\"}`
    #[serde(rename = "hidden_details", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub hidden_details: Option<Option<serde_json::Value>>,
    /// Custom metadata associated with the challenge. This is added by the Device/SDK directly to allow for the inclusion of device information. It must be a stringified JSON with only strings values eg. `{\"os\": \"Android\"}`. Can be up to 1024 characters in length.
    #[serde(rename = "metadata", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Option<serde_json::Value>>,
    #[serde(rename = "factor_type", skip_serializing_if = "Option::is_none")]
    pub factor_type: Option<models::ChallengeEnumFactorTypes>,
    /// The URL of this resource.
    #[serde(rename = "url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub url: Option<Option<String>>,
    /// Contains a dictionary of URL links to nested resources of this Challenge.
    #[serde(rename = "links", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub links: Option<Option<serde_json::Value>>,
}

impl VerifyV2ServiceEntityChallenge {
    pub fn new() -> VerifyV2ServiceEntityChallenge {
        VerifyV2ServiceEntityChallenge {
            sid: None,
            account_sid: None,
            service_sid: None,
            entity_sid: None,
            identity: None,
            factor_sid: None,
            date_created: None,
            date_updated: None,
            date_responded: None,
            expiration_date: None,
            status: None,
            responded_reason: None,
            details: None,
            hidden_details: None,
            metadata: None,
            factor_type: None,
            url: None,
            links: None,
        }
    }
}

