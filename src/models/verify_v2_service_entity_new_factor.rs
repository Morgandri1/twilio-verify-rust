/*
 * Twilio - Verify
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct VerifyV2ServiceEntityNewFactor {
    /// A 34 character string that uniquely identifies this Factor.
    #[serde(rename = "sid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sid: Option<Option<String>>,
    /// The unique SID identifier of the Account.
    #[serde(rename = "account_sid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub account_sid: Option<Option<String>>,
    /// The unique SID identifier of the Service.
    #[serde(rename = "service_sid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub service_sid: Option<Option<String>>,
    /// The unique SID identifier of the Entity.
    #[serde(rename = "entity_sid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub entity_sid: Option<Option<String>>,
    /// Customer unique identity for the Entity owner of the Factor. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
    #[serde(rename = "identity", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub identity: Option<Option<String>>,
    /// Contains the `factor_type` specific secret and metadata. For push, this is `binding.public_key` and `binding.alg`. For totp, this is `binding.secret` and `binding.uri`. The `binding.uri` property is generated following the [google authenticator key URI format](https://github.com/google/google-authenticator/wiki/Key-Uri-Format), and `Factor.friendly_name` is used for the “accountname” value and `Service.friendly_name` or `Service.totp.issuer` is used for the `issuer` value.   The Binding property is ONLY returned upon Factor creation.
    #[serde(rename = "binding", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub binding: Option<Option<serde_json::Value>>,
    #[serde(rename = "options", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub options: Option<Option<serde_json::Value>>,
    /// The date that this Factor was created, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
    #[serde(rename = "date_created", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<Option<String>>,
    /// The date that this Factor was updated, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
    #[serde(rename = "date_updated", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub date_updated: Option<Option<String>>,
    /// The friendly name of this Factor. This can be any string up to 64 characters, meant for humans to distinguish between Factors. For `factor_type` `push`, this could be a device name. For `factor_type` `totp`, this value is used as the “account name” in constructing the `binding.uri` property. At the same time, we recommend avoiding providing PII.
    #[serde(rename = "friendly_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<Option<String>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<models::NewFactorEnumFactorStatuses>,
    #[serde(rename = "factor_type", skip_serializing_if = "Option::is_none")]
    pub factor_type: Option<models::NewFactorEnumFactorTypes>,
    /// An object that contains configurations specific to a `factor_type`.
    #[serde(rename = "config", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub config: Option<Option<serde_json::Value>>,
    /// Custom metadata associated with the factor. This is added by the Device/SDK directly to allow for the inclusion of device information. It must be a stringified JSON with only strings values eg. `{\"os\": \"Android\"}`. Can be up to 1024 characters in length.
    #[serde(rename = "metadata", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Option<serde_json::Value>>,
    /// The URL of this resource.
    #[serde(rename = "url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub url: Option<Option<String>>,
}

impl VerifyV2ServiceEntityNewFactor {
    pub fn new() -> VerifyV2ServiceEntityNewFactor {
        VerifyV2ServiceEntityNewFactor {
            sid: None,
            account_sid: None,
            service_sid: None,
            entity_sid: None,
            identity: None,
            binding: None,
            options: None,
            date_created: None,
            date_updated: None,
            friendly_name: None,
            status: None,
            factor_type: None,
            config: None,
            metadata: None,
            url: None,
        }
    }
}

