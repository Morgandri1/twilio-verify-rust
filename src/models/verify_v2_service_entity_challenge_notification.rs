/*
 * Twilio - Verify
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct VerifyV2ServiceEntityChallengeNotification {
    /// A 34 character string that uniquely identifies this Notification.
    #[serde(rename = "sid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sid: Option<Option<String>>,
    /// The unique SID identifier of the Account.
    #[serde(rename = "account_sid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub account_sid: Option<Option<String>>,
    /// The unique SID identifier of the Service.
    #[serde(rename = "service_sid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub service_sid: Option<Option<String>>,
    /// The unique SID identifier of the Entity.
    #[serde(rename = "entity_sid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub entity_sid: Option<Option<String>>,
    /// Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
    #[serde(rename = "identity", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub identity: Option<Option<String>>,
    /// The unique SID identifier of the Challenge.
    #[serde(rename = "challenge_sid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub challenge_sid: Option<Option<String>>,
    /// The priority of the notification. For `push` Challenges it's always `high` which sends the notification immediately, and can wake up a sleeping device.
    #[serde(rename = "priority", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub priority: Option<Option<String>>,
    /// How long, in seconds, the notification is valid. Max: 5 minutes
    #[serde(rename = "ttl", skip_serializing_if = "Option::is_none")]
    pub ttl: Option<i32>,
    /// The date that this Notification was created, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
    #[serde(rename = "date_created", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<Option<String>>,
}

impl VerifyV2ServiceEntityChallengeNotification {
    pub fn new() -> VerifyV2ServiceEntityChallengeNotification {
        VerifyV2ServiceEntityChallengeNotification {
            sid: None,
            account_sid: None,
            service_sid: None,
            entity_sid: None,
            identity: None,
            challenge_sid: None,
            priority: None,
            ttl: None,
            date_created: None,
        }
    }
}

