/*
 * Twilio - Verify
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`create_messaging_configuration`]
#[derive(Clone, Debug)]
pub struct CreateMessagingConfigurationParams {
    /// The SID of the [Service](https://www.twilio.com/docs/verify/api/service) that the resource is associated with.
    pub service_sid: String,
    /// The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country this configuration will be applied to. If this is a global configuration, Country will take the value `all`.
    pub country: String,
    /// The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to be used to send SMS to the country of this configuration.
    pub messaging_service_sid: String
}

/// struct for passing parameters to the method [`delete_messaging_configuration`]
#[derive(Clone, Debug)]
pub struct DeleteMessagingConfigurationParams {
    /// The SID of the [Service](https://www.twilio.com/docs/verify/api/service) that the resource is associated with.
    pub service_sid: String,
    /// The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country this configuration will be applied to. If this is a global configuration, Country will take the value `all`.
    pub country: String
}

/// struct for passing parameters to the method [`fetch_messaging_configuration`]
#[derive(Clone, Debug)]
pub struct FetchMessagingConfigurationParams {
    /// The SID of the [Service](https://www.twilio.com/docs/verify/api/service) that the resource is associated with.
    pub service_sid: String,
    /// The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country this configuration will be applied to. If this is a global configuration, Country will take the value `all`.
    pub country: String
}

/// struct for passing parameters to the method [`list_messaging_configuration`]
#[derive(Clone, Debug)]
pub struct ListMessagingConfigurationParams {
    /// The SID of the [Service](https://www.twilio.com/docs/verify/api/service) that the resource is associated with.
    pub service_sid: String,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i64>,
    /// The page index. This value is simply for client state.
    pub page: Option<i32>,
    /// The page token. This is provided by the API.
    pub page_token: Option<String>
}

/// struct for passing parameters to the method [`update_messaging_configuration`]
#[derive(Clone, Debug)]
pub struct UpdateMessagingConfigurationParams {
    /// The SID of the [Service](https://www.twilio.com/docs/verify/api/service) that the resource is associated with.
    pub service_sid: String,
    /// The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country this configuration will be applied to. If this is a global configuration, Country will take the value `all`.
    pub country: String,
    /// The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource) to be used to send SMS to the country of this configuration.
    pub messaging_service_sid: String
}


/// struct for typed errors of method [`create_messaging_configuration`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateMessagingConfigurationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_messaging_configuration`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteMessagingConfigurationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_messaging_configuration`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchMessagingConfigurationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_messaging_configuration`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListMessagingConfigurationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_messaging_configuration`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateMessagingConfigurationError {
    UnknownValue(serde_json::Value),
}


/// Create a new MessagingConfiguration for a service.
pub async fn create_messaging_configuration(configuration: &configuration::Configuration, params: CreateMessagingConfigurationParams) -> Result<models::VerifyV2ServiceMessagingConfiguration, Error<CreateMessagingConfigurationError>> {

    let uri_str = format!("{}/v2/Services/{ServiceSid}/MessagingConfigurations", configuration.base_path, ServiceSid=crate::apis::urlencode(params.service_sid));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("Country", params.country.to_string());
    multipart_form_params.insert("MessagingServiceSid", params.messaging_service_sid.to_string());
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VerifyV2ServiceMessagingConfiguration`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VerifyV2ServiceMessagingConfiguration`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateMessagingConfigurationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Delete a specific MessagingConfiguration.
pub async fn delete_messaging_configuration(configuration: &configuration::Configuration, params: DeleteMessagingConfigurationParams) -> Result<(), Error<DeleteMessagingConfigurationError>> {

    let uri_str = format!("{}/v2/Services/{ServiceSid}/MessagingConfigurations/{Country}", configuration.base_path, ServiceSid=crate::apis::urlencode(params.service_sid), Country=crate::apis::urlencode(params.country));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteMessagingConfigurationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Fetch a specific MessagingConfiguration.
pub async fn fetch_messaging_configuration(configuration: &configuration::Configuration, params: FetchMessagingConfigurationParams) -> Result<models::VerifyV2ServiceMessagingConfiguration, Error<FetchMessagingConfigurationError>> {

    let uri_str = format!("{}/v2/Services/{ServiceSid}/MessagingConfigurations/{Country}", configuration.base_path, ServiceSid=crate::apis::urlencode(params.service_sid), Country=crate::apis::urlencode(params.country));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VerifyV2ServiceMessagingConfiguration`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VerifyV2ServiceMessagingConfiguration`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchMessagingConfigurationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Retrieve a list of all Messaging Configurations for a Service.
pub async fn list_messaging_configuration(configuration: &configuration::Configuration, params: ListMessagingConfigurationParams) -> Result<models::ListMessagingConfigurationResponse, Error<ListMessagingConfigurationError>> {

    let uri_str = format!("{}/v2/Services/{ServiceSid}/MessagingConfigurations", configuration.base_path, ServiceSid=crate::apis::urlencode(params.service_sid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.page_size {
        req_builder = req_builder.query(&[("PageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page {
        req_builder = req_builder.query(&[("Page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_token {
        req_builder = req_builder.query(&[("PageToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ListMessagingConfigurationResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ListMessagingConfigurationResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListMessagingConfigurationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Update a specific MessagingConfiguration
pub async fn update_messaging_configuration(configuration: &configuration::Configuration, params: UpdateMessagingConfigurationParams) -> Result<models::VerifyV2ServiceMessagingConfiguration, Error<UpdateMessagingConfigurationError>> {

    let uri_str = format!("{}/v2/Services/{ServiceSid}/MessagingConfigurations/{Country}", configuration.base_path, ServiceSid=crate::apis::urlencode(params.service_sid), Country=crate::apis::urlencode(params.country));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("MessagingServiceSid", params.messaging_service_sid.to_string());
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VerifyV2ServiceMessagingConfiguration`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VerifyV2ServiceMessagingConfiguration`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateMessagingConfigurationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

