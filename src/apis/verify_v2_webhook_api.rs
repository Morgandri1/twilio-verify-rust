/*
 * Twilio - Verify
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`create_webhook`]
#[derive(Clone, Debug)]
pub struct CreateWebhookParams {
    /// The unique SID identifier of the Service.
    pub service_sid: String,
    /// The string that you assigned to describe the webhook. **This value should not contain PII.**
    pub friendly_name: String,
    /// The array of events that this Webhook is subscribed to. Possible event types: `*, factor.deleted, factor.created, factor.verified, challenge.approved, challenge.denied`
    pub event_types: Vec<String>,
    /// The URL associated with this Webhook.
    pub webhook_url: String,
    pub status: Option<models::WebhookEnumStatus>,
    pub version: Option<models::WebhookEnumVersion>
}

/// struct for passing parameters to the method [`delete_webhook`]
#[derive(Clone, Debug)]
pub struct DeleteWebhookParams {
    /// The unique SID identifier of the Service.
    pub service_sid: String,
    /// The Twilio-provided string that uniquely identifies the Webhook resource to delete.
    pub sid: String
}

/// struct for passing parameters to the method [`fetch_webhook`]
#[derive(Clone, Debug)]
pub struct FetchWebhookParams {
    /// The unique SID identifier of the Service.
    pub service_sid: String,
    /// The Twilio-provided string that uniquely identifies the Webhook resource to fetch.
    pub sid: String
}

/// struct for passing parameters to the method [`list_webhook`]
#[derive(Clone, Debug)]
pub struct ListWebhookParams {
    /// The unique SID identifier of the Service.
    pub service_sid: String,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i64>,
    /// The page index. This value is simply for client state.
    pub page: Option<i32>,
    /// The page token. This is provided by the API.
    pub page_token: Option<String>
}

/// struct for passing parameters to the method [`update_webhook`]
#[derive(Clone, Debug)]
pub struct UpdateWebhookParams {
    /// The unique SID identifier of the Service.
    pub service_sid: String,
    /// The Twilio-provided string that uniquely identifies the Webhook resource to update.
    pub sid: String,
    /// The string that you assigned to describe the webhook. **This value should not contain PII.**
    pub friendly_name: Option<String>,
    /// The array of events that this Webhook is subscribed to. Possible event types: `*, factor.deleted, factor.created, factor.verified, challenge.approved, challenge.denied`
    pub event_types: Option<Vec<String>>,
    /// The URL associated with this Webhook.
    pub webhook_url: Option<String>,
    pub status: Option<models::WebhookEnumStatus>,
    pub version: Option<models::WebhookEnumVersion>
}


/// struct for typed errors of method [`create_webhook`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateWebhookError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_webhook`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteWebhookError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_webhook`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchWebhookError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_webhook`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListWebhookError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_webhook`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateWebhookError {
    UnknownValue(serde_json::Value),
}


/// Create a new Webhook for the Service
pub async fn create_webhook(configuration: &configuration::Configuration, params: CreateWebhookParams) -> Result<models::VerifyV2ServiceWebhook, Error<CreateWebhookError>> {

    let uri_str = format!("{}/v2/Services/{ServiceSid}/Webhooks", configuration.base_path, ServiceSid=crate::apis::urlencode(params.service_sid));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("FriendlyName", params.friendly_name.to_string());
    multipart_form_params.insert("EventTypes", params.event_types.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string());
    multipart_form_params.insert("WebhookUrl", params.webhook_url.to_string());
    if let Some(param_value) = params.status {
        multipart_form_params.insert("Status", param_value.to_string());
    }
    if let Some(param_value) = params.version {
        multipart_form_params.insert("Version", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VerifyV2ServiceWebhook`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VerifyV2ServiceWebhook`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateWebhookError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Delete a specific Webhook.
pub async fn delete_webhook(configuration: &configuration::Configuration, params: DeleteWebhookParams) -> Result<(), Error<DeleteWebhookError>> {

    let uri_str = format!("{}/v2/Services/{ServiceSid}/Webhooks/{Sid}", configuration.base_path, ServiceSid=crate::apis::urlencode(params.service_sid), Sid=crate::apis::urlencode(params.sid));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteWebhookError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Fetch a specific Webhook.
pub async fn fetch_webhook(configuration: &configuration::Configuration, params: FetchWebhookParams) -> Result<models::VerifyV2ServiceWebhook, Error<FetchWebhookError>> {

    let uri_str = format!("{}/v2/Services/{ServiceSid}/Webhooks/{Sid}", configuration.base_path, ServiceSid=crate::apis::urlencode(params.service_sid), Sid=crate::apis::urlencode(params.sid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VerifyV2ServiceWebhook`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VerifyV2ServiceWebhook`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchWebhookError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Retrieve a list of all Webhooks for a Service.
pub async fn list_webhook(configuration: &configuration::Configuration, params: ListWebhookParams) -> Result<models::ListWebhookResponse, Error<ListWebhookError>> {

    let uri_str = format!("{}/v2/Services/{ServiceSid}/Webhooks", configuration.base_path, ServiceSid=crate::apis::urlencode(params.service_sid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.page_size {
        req_builder = req_builder.query(&[("PageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page {
        req_builder = req_builder.query(&[("Page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_token {
        req_builder = req_builder.query(&[("PageToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ListWebhookResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ListWebhookResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListWebhookError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// 
pub async fn update_webhook(configuration: &configuration::Configuration, params: UpdateWebhookParams) -> Result<models::VerifyV2ServiceWebhook, Error<UpdateWebhookError>> {

    let uri_str = format!("{}/v2/Services/{ServiceSid}/Webhooks/{Sid}", configuration.base_path, ServiceSid=crate::apis::urlencode(params.service_sid), Sid=crate::apis::urlencode(params.sid));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    if let Some(param_value) = params.friendly_name {
        multipart_form_params.insert("FriendlyName", param_value.to_string());
    }
    if let Some(param_value) = params.event_types {
        multipart_form_params.insert("EventTypes", param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string());
    }
    if let Some(param_value) = params.webhook_url {
        multipart_form_params.insert("WebhookUrl", param_value.to_string());
    }
    if let Some(param_value) = params.status {
        multipart_form_params.insert("Status", param_value.to_string());
    }
    if let Some(param_value) = params.version {
        multipart_form_params.insert("Version", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VerifyV2ServiceWebhook`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VerifyV2ServiceWebhook`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateWebhookError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

