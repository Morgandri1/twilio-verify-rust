/*
 * Twilio - Verify
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`fetch_verification_attempt`]
#[derive(Clone, Debug)]
pub struct FetchVerificationAttemptParams {
    /// The unique SID identifier of a Verification Attempt
    pub sid: String
}

/// struct for passing parameters to the method [`list_verification_attempt`]
#[derive(Clone, Debug)]
pub struct ListVerificationAttemptParams {
    /// Datetime filter used to consider only Verification Attempts created after this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd'T'HH:mm:ss'Z.
    pub date_created_after: Option<String>,
    /// Datetime filter used to consider only Verification Attempts created before this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd'T'HH:mm:ss'Z.
    pub date_created_before: Option<String>,
    /// Destination of a verification. It is phone number in E.164 format.
    pub channel_data_to: Option<String>,
    /// Filter used to query Verification Attempts sent to the specified destination country.
    pub country: Option<String>,
    /// Filter used to query Verification Attempts by communication channel.
    pub channel: Option<models::VerificationAttemptEnumChannels>,
    /// Filter used to query Verification Attempts by verify service. Only attempts of the provided SID will be returned.
    pub verify_service_sid: Option<String>,
    /// Filter used to return all the Verification Attempts of a single verification. Only attempts of the provided verification SID will be returned.
    pub verification_sid: Option<String>,
    /// Filter used to query Verification Attempts by conversion status. Valid values are `UNCONVERTED`, for attempts that were not converted, and `CONVERTED`, for attempts that were confirmed.
    pub status: Option<models::VerificationAttemptEnumConversionStatus>,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i64>,
    /// The page index. This value is simply for client state.
    pub page: Option<i32>,
    /// The page token. This is provided by the API.
    pub page_token: Option<String>
}


/// struct for typed errors of method [`fetch_verification_attempt`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchVerificationAttemptError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_verification_attempt`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListVerificationAttemptError {
    UnknownValue(serde_json::Value),
}


/// Fetch a specific verification attempt.
pub async fn fetch_verification_attempt(configuration: &configuration::Configuration, params: FetchVerificationAttemptParams) -> Result<models::VerifyV2VerificationAttempt, Error<FetchVerificationAttemptError>> {

    let uri_str = format!("{}/v2/Attempts/{Sid}", configuration.base_path, Sid=crate::apis::urlencode(params.sid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VerifyV2VerificationAttempt`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VerifyV2VerificationAttempt`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchVerificationAttemptError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// List all the verification attempts for a given Account.
pub async fn list_verification_attempt(configuration: &configuration::Configuration, params: ListVerificationAttemptParams) -> Result<models::ListVerificationAttemptResponse, Error<ListVerificationAttemptError>> {

    let uri_str = format!("{}/v2/Attempts", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.date_created_after {
        req_builder = req_builder.query(&[("DateCreatedAfter", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.date_created_before {
        req_builder = req_builder.query(&[("DateCreatedBefore", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.channel_data_to {
        req_builder = req_builder.query(&[("ChannelData.To", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.country {
        req_builder = req_builder.query(&[("Country", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.channel {
        req_builder = req_builder.query(&[("Channel", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.verify_service_sid {
        req_builder = req_builder.query(&[("VerifyServiceSid", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.verification_sid {
        req_builder = req_builder.query(&[("VerificationSid", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.status {
        req_builder = req_builder.query(&[("Status", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_size {
        req_builder = req_builder.query(&[("PageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page {
        req_builder = req_builder.query(&[("Page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_token {
        req_builder = req_builder.query(&[("PageToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ListVerificationAttemptResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ListVerificationAttemptResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListVerificationAttemptError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

