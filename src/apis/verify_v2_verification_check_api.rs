/*
 * Twilio - Verify
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`create_verification_check`]
#[derive(Clone, Debug)]
pub struct CreateVerificationCheckParams {
    /// The SID of the verification [Service](https://www.twilio.com/docs/verify/api/service) to create the resource under.
    pub service_sid: String,
    /// The 4-10 character string being verified.
    pub code: Option<String>,
    /// The phone number or [email](https://www.twilio.com/docs/verify/email) to verify. Either this parameter or the `verification_sid` must be specified. Phone numbers must be in [E.164 format](https://www.twilio.com/docs/glossary/what-e164).
    pub to: Option<String>,
    /// A SID that uniquely identifies the Verification Check. Either this parameter or the `to` phone number/[email](https://www.twilio.com/docs/verify/email) must be specified.
    pub verification_sid: Option<String>,
    /// The amount of the associated PSD2 compliant transaction. Requires the PSD2 Service flag enabled.
    pub amount: Option<String>,
    /// The payee of the associated PSD2 compliant transaction. Requires the PSD2 Service flag enabled.
    pub payee: Option<String>,
    /// A sna client token received in sna url invocation response needs to be passed in Verification Check request and should match to get successful response.
    pub sna_client_token: Option<String>
}


/// struct for typed errors of method [`create_verification_check`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateVerificationCheckError {
    UnknownValue(serde_json::Value),
}


/// challenge a specific Verification Check.
pub async fn create_verification_check(configuration: &configuration::Configuration, params: CreateVerificationCheckParams) -> Result<models::VerifyV2ServiceVerificationCheck, Error<CreateVerificationCheckError>> {

    let uri_str = format!("{}/v2/Services/{ServiceSid}/VerificationCheck", configuration.base_path, ServiceSid=crate::apis::urlencode(params.service_sid));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    if let Some(param_value) = params.code {
        multipart_form_params.insert("Code", param_value.to_string());
    }
    if let Some(param_value) = params.to {
        multipart_form_params.insert("To", param_value.to_string());
    }
    if let Some(param_value) = params.verification_sid {
        multipart_form_params.insert("VerificationSid", param_value.to_string());
    }
    if let Some(param_value) = params.amount {
        multipart_form_params.insert("Amount", param_value.to_string());
    }
    if let Some(param_value) = params.payee {
        multipart_form_params.insert("Payee", param_value.to_string());
    }
    if let Some(param_value) = params.sna_client_token {
        multipart_form_params.insert("SnaClientToken", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VerifyV2ServiceVerificationCheck`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VerifyV2ServiceVerificationCheck`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateVerificationCheckError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

