/*
 * Twilio - Verify
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`delete_factor`]
#[derive(Clone, Debug)]
pub struct DeleteFactorParams {
    /// The unique SID identifier of the Service.
    pub service_sid: String,
    /// Customer unique identity for the Entity owner of the Factor. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
    pub identity: String,
    /// A 34 character string that uniquely identifies this Factor.
    pub sid: String
}

/// struct for passing parameters to the method [`fetch_factor`]
#[derive(Clone, Debug)]
pub struct FetchFactorParams {
    /// The unique SID identifier of the Service.
    pub service_sid: String,
    /// Customer unique identity for the Entity owner of the Factor. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
    pub identity: String,
    /// A 34 character string that uniquely identifies this Factor.
    pub sid: String
}

/// struct for passing parameters to the method [`list_factor`]
#[derive(Clone, Debug)]
pub struct ListFactorParams {
    /// The unique SID identifier of the Service.
    pub service_sid: String,
    /// Customer unique identity for the Entity owner of the Factors. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
    pub identity: String,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i64>,
    /// The page index. This value is simply for client state.
    pub page: Option<i32>,
    /// The page token. This is provided by the API.
    pub page_token: Option<String>
}

/// struct for passing parameters to the method [`update_factor`]
#[derive(Clone, Debug)]
pub struct UpdateFactorParams {
    /// The unique SID identifier of the Service.
    pub service_sid: String,
    /// Customer unique identity for the Entity owner of the Factor. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
    pub identity: String,
    /// A 34 character string that uniquely identifies this Factor.
    pub sid: String,
    /// The optional payload needed to verify the Factor for the first time. E.g. for a TOTP, the numeric code.
    pub auth_payload: Option<String>,
    /// The new friendly name of this Factor. It can be up to 64 characters.
    pub friendly_name: Option<String>,
    /// For APN, the device token. For FCM, the registration token. It is used to send the push notifications. Required when `factor_type` is `push`. If specified, this value must be between 32 and 255 characters long.
    pub config_notification_token: Option<String>,
    /// The Verify Push SDK version used to configure the factor
    pub config_sdk_version: Option<String>,
    /// Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive
    pub config_time_step: Option<i32>,
    /// The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive
    pub config_skew: Option<i32>,
    /// Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive
    pub config_code_length: Option<i32>,
    pub config_alg: Option<models::FactorEnumTotpAlgorithms>,
    /// The transport technology used to generate the Notification Token. Can be `apn`, `fcm` or `none`.  Required when `factor_type` is `push`.
    pub config_notification_platform: Option<String>
}


/// struct for typed errors of method [`delete_factor`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteFactorError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_factor`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchFactorError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_factor`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListFactorError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_factor`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateFactorError {
    UnknownValue(serde_json::Value),
}


/// Delete a specific Factor.
pub async fn delete_factor(configuration: &configuration::Configuration, params: DeleteFactorParams) -> Result<(), Error<DeleteFactorError>> {

    let uri_str = format!("{}/v2/Services/{ServiceSid}/Entities/{Identity}/Factors/{Sid}", configuration.base_path, ServiceSid=crate::apis::urlencode(params.service_sid), Identity=crate::apis::urlencode(params.identity), Sid=crate::apis::urlencode(params.sid));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteFactorError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Fetch a specific Factor.
pub async fn fetch_factor(configuration: &configuration::Configuration, params: FetchFactorParams) -> Result<models::VerifyV2ServiceEntityFactor, Error<FetchFactorError>> {

    let uri_str = format!("{}/v2/Services/{ServiceSid}/Entities/{Identity}/Factors/{Sid}", configuration.base_path, ServiceSid=crate::apis::urlencode(params.service_sid), Identity=crate::apis::urlencode(params.identity), Sid=crate::apis::urlencode(params.sid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VerifyV2ServiceEntityFactor`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VerifyV2ServiceEntityFactor`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchFactorError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Retrieve a list of all Factors for an Entity.
pub async fn list_factor(configuration: &configuration::Configuration, params: ListFactorParams) -> Result<models::ListFactorResponse, Error<ListFactorError>> {

    let uri_str = format!("{}/v2/Services/{ServiceSid}/Entities/{Identity}/Factors", configuration.base_path, ServiceSid=crate::apis::urlencode(params.service_sid), Identity=crate::apis::urlencode(params.identity));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.page_size {
        req_builder = req_builder.query(&[("PageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page {
        req_builder = req_builder.query(&[("Page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_token {
        req_builder = req_builder.query(&[("PageToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ListFactorResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ListFactorResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListFactorError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Update a specific Factor. This endpoint can be used to Verify a Factor if passed an `AuthPayload` param.
pub async fn update_factor(configuration: &configuration::Configuration, params: UpdateFactorParams) -> Result<models::VerifyV2ServiceEntityFactor, Error<UpdateFactorError>> {

    let uri_str = format!("{}/v2/Services/{ServiceSid}/Entities/{Identity}/Factors/{Sid}", configuration.base_path, ServiceSid=crate::apis::urlencode(params.service_sid), Identity=crate::apis::urlencode(params.identity), Sid=crate::apis::urlencode(params.sid));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    if let Some(param_value) = params.auth_payload {
        multipart_form_params.insert("AuthPayload", param_value.to_string());
    }
    if let Some(param_value) = params.friendly_name {
        multipart_form_params.insert("FriendlyName", param_value.to_string());
    }
    if let Some(param_value) = params.config_notification_token {
        multipart_form_params.insert("Config.NotificationToken", param_value.to_string());
    }
    if let Some(param_value) = params.config_sdk_version {
        multipart_form_params.insert("Config.SdkVersion", param_value.to_string());
    }
    if let Some(param_value) = params.config_time_step {
        multipart_form_params.insert("Config.TimeStep", param_value.to_string());
    }
    if let Some(param_value) = params.config_skew {
        multipart_form_params.insert("Config.Skew", param_value.to_string());
    }
    if let Some(param_value) = params.config_code_length {
        multipart_form_params.insert("Config.CodeLength", param_value.to_string());
    }
    if let Some(param_value) = params.config_alg {
        multipart_form_params.insert("Config.Alg", param_value.to_string());
    }
    if let Some(param_value) = params.config_notification_platform {
        multipart_form_params.insert("Config.NotificationPlatform", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VerifyV2ServiceEntityFactor`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VerifyV2ServiceEntityFactor`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateFactorError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

