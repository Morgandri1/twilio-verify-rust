/*
 * Twilio - Verify
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`create_bucket`]
#[derive(Clone, Debug)]
pub struct CreateBucketParams {
    /// The SID of the [Service](https://www.twilio.com/docs/verify/api/service) the resource is associated with.
    pub service_sid: String,
    /// The Twilio-provided string that uniquely identifies the Rate Limit resource.
    pub rate_limit_sid: String,
    /// Maximum number of requests permitted in during the interval.
    pub max: i32,
    /// Number of seconds that the rate limit will be enforced over.
    pub interval: i32
}

/// struct for passing parameters to the method [`delete_bucket`]
#[derive(Clone, Debug)]
pub struct DeleteBucketParams {
    /// The SID of the [Service](https://www.twilio.com/docs/verify/api/service) the resource is associated with.
    pub service_sid: String,
    /// The Twilio-provided string that uniquely identifies the Rate Limit resource.
    pub rate_limit_sid: String,
    /// A 34 character string that uniquely identifies this Bucket.
    pub sid: String
}

/// struct for passing parameters to the method [`fetch_bucket`]
#[derive(Clone, Debug)]
pub struct FetchBucketParams {
    /// The SID of the [Service](https://www.twilio.com/docs/verify/api/service) the resource is associated with.
    pub service_sid: String,
    /// The Twilio-provided string that uniquely identifies the Rate Limit resource.
    pub rate_limit_sid: String,
    /// A 34 character string that uniquely identifies this Bucket.
    pub sid: String
}

/// struct for passing parameters to the method [`list_bucket`]
#[derive(Clone, Debug)]
pub struct ListBucketParams {
    /// The SID of the [Service](https://www.twilio.com/docs/verify/api/service) the resource is associated with.
    pub service_sid: String,
    /// The Twilio-provided string that uniquely identifies the Rate Limit resource.
    pub rate_limit_sid: String,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i64>,
    /// The page index. This value is simply for client state.
    pub page: Option<i32>,
    /// The page token. This is provided by the API.
    pub page_token: Option<String>
}

/// struct for passing parameters to the method [`update_bucket`]
#[derive(Clone, Debug)]
pub struct UpdateBucketParams {
    /// The SID of the [Service](https://www.twilio.com/docs/verify/api/service) the resource is associated with.
    pub service_sid: String,
    /// The Twilio-provided string that uniquely identifies the Rate Limit resource.
    pub rate_limit_sid: String,
    /// A 34 character string that uniquely identifies this Bucket.
    pub sid: String,
    /// Maximum number of requests permitted in during the interval.
    pub max: Option<i32>,
    /// Number of seconds that the rate limit will be enforced over.
    pub interval: Option<i32>
}


/// struct for typed errors of method [`create_bucket`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateBucketError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_bucket`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteBucketError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_bucket`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchBucketError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_bucket`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListBucketError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_bucket`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateBucketError {
    UnknownValue(serde_json::Value),
}


/// Create a new Bucket for a Rate Limit
pub async fn create_bucket(configuration: &configuration::Configuration, params: CreateBucketParams) -> Result<models::VerifyV2ServiceRateLimitBucket, Error<CreateBucketError>> {

    let uri_str = format!("{}/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets", configuration.base_path, ServiceSid=crate::apis::urlencode(params.service_sid), RateLimitSid=crate::apis::urlencode(params.rate_limit_sid));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("Max", params.max.to_string());
    multipart_form_params.insert("Interval", params.interval.to_string());
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VerifyV2ServiceRateLimitBucket`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VerifyV2ServiceRateLimitBucket`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateBucketError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Delete a specific Bucket.
pub async fn delete_bucket(configuration: &configuration::Configuration, params: DeleteBucketParams) -> Result<(), Error<DeleteBucketError>> {

    let uri_str = format!("{}/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets/{Sid}", configuration.base_path, ServiceSid=crate::apis::urlencode(params.service_sid), RateLimitSid=crate::apis::urlencode(params.rate_limit_sid), Sid=crate::apis::urlencode(params.sid));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteBucketError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Fetch a specific Bucket.
pub async fn fetch_bucket(configuration: &configuration::Configuration, params: FetchBucketParams) -> Result<models::VerifyV2ServiceRateLimitBucket, Error<FetchBucketError>> {

    let uri_str = format!("{}/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets/{Sid}", configuration.base_path, ServiceSid=crate::apis::urlencode(params.service_sid), RateLimitSid=crate::apis::urlencode(params.rate_limit_sid), Sid=crate::apis::urlencode(params.sid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VerifyV2ServiceRateLimitBucket`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VerifyV2ServiceRateLimitBucket`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchBucketError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Retrieve a list of all Buckets for a Rate Limit.
pub async fn list_bucket(configuration: &configuration::Configuration, params: ListBucketParams) -> Result<models::ListBucketResponse, Error<ListBucketError>> {

    let uri_str = format!("{}/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets", configuration.base_path, ServiceSid=crate::apis::urlencode(params.service_sid), RateLimitSid=crate::apis::urlencode(params.rate_limit_sid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.page_size {
        req_builder = req_builder.query(&[("PageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page {
        req_builder = req_builder.query(&[("Page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_token {
        req_builder = req_builder.query(&[("PageToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ListBucketResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ListBucketResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListBucketError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Update a specific Bucket.
pub async fn update_bucket(configuration: &configuration::Configuration, params: UpdateBucketParams) -> Result<models::VerifyV2ServiceRateLimitBucket, Error<UpdateBucketError>> {

    let uri_str = format!("{}/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets/{Sid}", configuration.base_path, ServiceSid=crate::apis::urlencode(params.service_sid), RateLimitSid=crate::apis::urlencode(params.rate_limit_sid), Sid=crate::apis::urlencode(params.sid));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    if let Some(param_value) = params.max {
        multipart_form_params.insert("Max", param_value.to_string());
    }
    if let Some(param_value) = params.interval {
        multipart_form_params.insert("Interval", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VerifyV2ServiceRateLimitBucket`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VerifyV2ServiceRateLimitBucket`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateBucketError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

