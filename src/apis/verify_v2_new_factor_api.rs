/*
 * Twilio - Verify
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`create_new_factor`]
#[derive(Clone, Debug)]
pub struct CreateNewFactorParams {
    /// The unique SID identifier of the Service.
    pub service_sid: String,
    /// Customer unique identity for the Entity owner of the Factor. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
    pub identity: String,
    /// The friendly name of this Factor. This can be any string up to 64 characters, meant for humans to distinguish between Factors. For `factor_type` `push`, this could be a device name. For `factor_type` `totp`, this value is used as the “account name” in constructing the `binding.uri` property. At the same time, we recommend avoiding providing PII.
    pub friendly_name: String,
    pub factor_type: models::NewFactorEnumFactorTypes,
    /// The algorithm used when `factor_type` is `push`. Algorithm supported: `ES256`
    pub binding_alg: Option<String>,
    /// The Ecdsa public key in PKIX, ASN.1 DER format encoded in Base64.  Required when `factor_type` is `push`
    pub binding_public_key: Option<String>,
    /// The ID that uniquely identifies your app in the Google or Apple store, such as `com.example.myapp`. It can be up to 100 characters long.  Required when `factor_type` is `push`.
    pub config_app_id: Option<String>,
    pub config_notification_platform: Option<models::NewFactorEnumNotificationPlatforms>,
    /// For APN, the device token. For FCM, the registration token. It is used to send the push notifications. Must be between 32 and 255 characters long.  Required when `factor_type` is `push`.
    pub config_notification_token: Option<String>,
    /// The Verify Push SDK version used to configure the factor  Required when `factor_type` is `push`
    pub config_sdk_version: Option<String>,
    /// The shared secret for TOTP factors encoded in Base32. This can be provided when creating the Factor, otherwise it will be generated.  Used when `factor_type` is `totp`
    pub binding_secret: Option<String>,
    /// Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive. The default value is defined at the service level in the property `totp.time_step`. Defaults to 30 seconds if not configured.  Used when `factor_type` is `totp`
    pub config_time_step: Option<i32>,
    /// The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive. The default value is defined at the service level in the property `totp.skew`. If not configured defaults to 1.  Used when `factor_type` is `totp`
    pub config_skew: Option<i32>,
    /// Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive. The default value is defined at the service level in the property `totp.code_length`. If not configured defaults to 6.  Used when `factor_type` is `totp`
    pub config_code_length: Option<i32>,
    pub config_alg: Option<models::NewFactorEnumTotpAlgorithms>,
    /// Custom metadata associated with the factor. This is added by the Device/SDK directly to allow for the inclusion of device information. It must be a stringified JSON with only strings values eg. `{\\\"os\\\": \\\"Android\\\"}`. Can be up to 1024 characters in length.
    pub metadata: Option<serde_json::Value>
}


/// struct for typed errors of method [`create_new_factor`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateNewFactorError {
    UnknownValue(serde_json::Value),
}


/// Create a new Factor for the Entity
pub async fn create_new_factor(configuration: &configuration::Configuration, params: CreateNewFactorParams) -> Result<models::VerifyV2ServiceEntityNewFactor, Error<CreateNewFactorError>> {

    let uri_str = format!("{}/v2/Services/{ServiceSid}/Entities/{Identity}/Factors", configuration.base_path, ServiceSid=crate::apis::urlencode(params.service_sid), Identity=crate::apis::urlencode(params.identity));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("FriendlyName", params.friendly_name.to_string());
    multipart_form_params.insert("FactorType", params.factor_type.to_string());
    if let Some(param_value) = params.binding_alg {
        multipart_form_params.insert("Binding.Alg", param_value.to_string());
    }
    if let Some(param_value) = params.binding_public_key {
        multipart_form_params.insert("Binding.PublicKey", param_value.to_string());
    }
    if let Some(param_value) = params.config_app_id {
        multipart_form_params.insert("Config.AppId", param_value.to_string());
    }
    if let Some(param_value) = params.config_notification_platform {
        multipart_form_params.insert("Config.NotificationPlatform", param_value.to_string());
    }
    if let Some(param_value) = params.config_notification_token {
        multipart_form_params.insert("Config.NotificationToken", param_value.to_string());
    }
    if let Some(param_value) = params.config_sdk_version {
        multipart_form_params.insert("Config.SdkVersion", param_value.to_string());
    }
    if let Some(param_value) = params.binding_secret {
        multipart_form_params.insert("Binding.Secret", param_value.to_string());
    }
    if let Some(param_value) = params.config_time_step {
        multipart_form_params.insert("Config.TimeStep", param_value.to_string());
    }
    if let Some(param_value) = params.config_skew {
        multipart_form_params.insert("Config.Skew", param_value.to_string());
    }
    if let Some(param_value) = params.config_code_length {
        multipart_form_params.insert("Config.CodeLength", param_value.to_string());
    }
    if let Some(param_value) = params.config_alg {
        multipart_form_params.insert("Config.Alg", param_value.to_string());
    }
    if let Some(param_value) = params.metadata {
        multipart_form_params.insert("Metadata", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VerifyV2ServiceEntityNewFactor`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VerifyV2ServiceEntityNewFactor`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateNewFactorError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

