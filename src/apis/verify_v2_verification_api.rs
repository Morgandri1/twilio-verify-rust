/*
 * Twilio - Verify
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`create_verification`]
#[derive(Clone, Debug, Default)]
pub struct CreateVerificationParams {
    /// The SID of the verification [Service](https://www.twilio.com/docs/verify/api/service) to create the resource under.
    pub service_sid: String,
    /// The phone number or [email](https://www.twilio.com/docs/verify/email) to verify. Phone numbers must be in [E.164 format](https://www.twilio.com/docs/glossary/what-e164).
    pub to: String,
    /// The verification method to use. One of: [`email`](https://www.twilio.com/docs/verify/email), `sms`, `whatsapp`, `call`, `sna` or `auto`.
    pub channel: String,
    /// A custom user defined friendly name that overwrites the existing one in the verification message
    pub custom_friendly_name: Option<String>,
    /// The text of a custom message to use for the verification.
    pub custom_message: Option<String>,
    /// The digits to send after a phone call is answered, for example, to dial an extension. For more information, see the Programmable Voice documentation of [sendDigits](https://www.twilio.com/docs/voice/twiml/number#attributes-sendDigits).
    pub send_digits: Option<String>,
    /// Locale will automatically resolve based on phone number country code for SMS, WhatsApp, and call channel verifications. It will fallback to English or the templateâ€™s default translation if the selected translation is not available. This parameter will override the automatic locale resolution. [See supported languages and more information here](https://www.twilio.com/docs/verify/supported-languages).
    pub locale: Option<String>,
    /// A pre-generated code to use for verification. The code can be between 4 and 10 characters, inclusive.
    pub custom_code: Option<String>,
    /// The amount of the associated PSD2 compliant transaction. Requires the PSD2 Service flag enabled.
    pub amount: Option<String>,
    /// The payee of the associated PSD2 compliant transaction. Requires the PSD2 Service flag enabled.
    pub payee: Option<String>,
    /// The custom key-value pairs of Programmable Rate Limits. Keys correspond to `unique_name` fields defined when [creating your Rate Limit](https://www.twilio.com/docs/verify/api/service-rate-limits). Associated value pairs represent values in the request that you are rate limiting on. You may include multiple Rate Limit values in each request.
    pub rate_limits: Option<serde_json::Value>,
    /// [`email`](https://www.twilio.com/docs/verify/email) channel configuration in json format. The fields 'from' and 'from_name' are optional but if included the 'from' field must have a valid email address.
    pub channel_configuration: Option<serde_json::Value>,
    /// Your [App Hash](https://developers.google.com/identity/sms-retriever/verify#computing_your_apps_hash_string) to be appended at the end of your verification SMS body. Applies only to SMS. Example SMS body: `<#> Your AppName verification code is: 1234 He42w354ol9`.
    pub app_hash: Option<String>,
    /// The message [template](https://www.twilio.com/docs/verify/api/templates). If provided, will override the default template for the Service. SMS and Voice channels only.
    pub template_sid: Option<String>,
    /// A stringified JSON object in which the keys are the template's special variables and the values are the variables substitutions.
    pub template_custom_substitutions: Option<String>,
    /// Strongly encouraged if using the auto channel. The IP address of the client's device. If provided, it has to be a valid IPv4 or IPv6 address.
    pub device_ip: Option<String>,
    /// An optional Boolean value to indicate the requirement of sna client token in the SNA URL invocation response for added security. This token must match in the Verification Check request to confirm phone number verification.
    pub enable_sna_client_token: Option<bool>,
    pub risk_check: Option<models::VerificationEnumRiskCheck>,
    /// A string containing a JSON map of key value pairs of tags to be recorded as metadata for the message. The object may contain up to 10 tags. Keys and values can each be up to 128 characters in length.
    pub tags: Option<String>
}

/// struct for passing parameters to the method [`fetch_verification`]
#[derive(Clone, Debug)]
pub struct FetchVerificationParams {
    /// The SID of the verification [Service](https://www.twilio.com/docs/verify/api/service) to fetch the resource from.
    pub service_sid: String,
    /// The Twilio-provided string that uniquely identifies the Verification resource to fetch.
    pub sid: String
}

/// struct for passing parameters to the method [`update_verification`]
#[derive(Clone, Debug)]
pub struct UpdateVerificationParams {
    /// The SID of the verification [Service](https://www.twilio.com/docs/verify/api/service) to update the resource from.
    pub service_sid: String,
    /// The Twilio-provided string that uniquely identifies the Verification resource to update.
    pub sid: String,
    pub status: models::VerificationEnumStatus
}


/// struct for typed errors of method [`create_verification`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateVerificationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_verification`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchVerificationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_verification`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateVerificationError {
    UnknownValue(serde_json::Value),
}


/// Create a new Verification using a Service
pub async fn create_verification(configuration: &configuration::Configuration, params: CreateVerificationParams) -> Result<models::VerifyV2ServiceVerification, Error<CreateVerificationError>> {

    let uri_str = format!("{}/v2/Services/{ServiceSid}/Verifications", configuration.base_path, ServiceSid=crate::apis::urlencode(params.service_sid));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("To", params.to.to_string());
    multipart_form_params.insert("Channel", params.channel.to_string());
    if let Some(param_value) = params.custom_friendly_name {
        multipart_form_params.insert("CustomFriendlyName", param_value.to_string());
    }
    if let Some(param_value) = params.custom_message {
        multipart_form_params.insert("CustomMessage", param_value.to_string());
    }
    if let Some(param_value) = params.send_digits {
        multipart_form_params.insert("SendDigits", param_value.to_string());
    }
    if let Some(param_value) = params.locale {
        multipart_form_params.insert("Locale", param_value.to_string());
    }
    if let Some(param_value) = params.custom_code {
        multipart_form_params.insert("CustomCode", param_value.to_string());
    }
    if let Some(param_value) = params.amount {
        multipart_form_params.insert("Amount", param_value.to_string());
    }
    if let Some(param_value) = params.payee {
        multipart_form_params.insert("Payee", param_value.to_string());
    }
    if let Some(param_value) = params.rate_limits {
        multipart_form_params.insert("RateLimits", param_value.to_string());
    }
    if let Some(param_value) = params.channel_configuration {
        multipart_form_params.insert("ChannelConfiguration", param_value.to_string());
    }
    if let Some(param_value) = params.app_hash {
        multipart_form_params.insert("AppHash", param_value.to_string());
    }
    if let Some(param_value) = params.template_sid {
        multipart_form_params.insert("TemplateSid", param_value.to_string());
    }
    if let Some(param_value) = params.template_custom_substitutions {
        multipart_form_params.insert("TemplateCustomSubstitutions", param_value.to_string());
    }
    if let Some(param_value) = params.device_ip {
        multipart_form_params.insert("DeviceIp", param_value.to_string());
    }
    if let Some(param_value) = params.enable_sna_client_token {
        multipart_form_params.insert("EnableSnaClientToken", param_value.to_string());
    }
    if let Some(param_value) = params.risk_check {
        multipart_form_params.insert("RiskCheck", param_value.to_string());
    }
    if let Some(param_value) = params.tags {
        multipart_form_params.insert("Tags", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VerifyV2ServiceVerification`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VerifyV2ServiceVerification`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateVerificationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Fetch a specific Verification
pub async fn fetch_verification(configuration: &configuration::Configuration, params: FetchVerificationParams) -> Result<models::VerifyV2ServiceVerification, Error<FetchVerificationError>> {

    let uri_str = format!("{}/v2/Services/{ServiceSid}/Verifications/{Sid}", configuration.base_path, ServiceSid=crate::apis::urlencode(params.service_sid), Sid=crate::apis::urlencode(params.sid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VerifyV2ServiceVerification`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VerifyV2ServiceVerification`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchVerificationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Update a Verification status
pub async fn update_verification(configuration: &configuration::Configuration, params: UpdateVerificationParams) -> Result<models::VerifyV2ServiceVerification, Error<UpdateVerificationError>> {

    let uri_str = format!("{}/v2/Services/{ServiceSid}/Verifications/{Sid}", configuration.base_path, ServiceSid=crate::apis::urlencode(params.service_sid), Sid=crate::apis::urlencode(params.sid));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("Status", params.status.to_string());
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VerifyV2ServiceVerification`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VerifyV2ServiceVerification`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateVerificationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

