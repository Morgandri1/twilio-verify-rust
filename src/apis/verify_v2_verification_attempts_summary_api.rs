/*
 * Twilio - Verify
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`fetch_verification_attempts_summary`]
#[derive(Clone, Debug)]
pub struct FetchVerificationAttemptsSummaryParams {
    /// Filter used to consider only Verification Attempts of the given verify service on the summary aggregation.
    pub verify_service_sid: Option<String>,
    /// Datetime filter used to consider only Verification Attempts created after this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd'T'HH:mm:ss'Z.
    pub date_created_after: Option<String>,
    /// Datetime filter used to consider only Verification Attempts created before this datetime on the summary aggregation. Given as GMT in ISO 8601 formatted datetime string: yyyy-MM-dd'T'HH:mm:ss'Z.
    pub date_created_before: Option<String>,
    /// Filter used to consider only Verification Attempts sent to the specified destination country on the summary aggregation.
    pub country: Option<String>,
    /// Filter Verification Attempts considered on the summary aggregation by communication channel.
    pub channel: Option<models::VerificationAttemptsSummaryEnumChannels>,
    /// Filter the Verification Attempts considered on the summary aggregation by Destination prefix. It is the prefix of a phone number in E.164 format.
    pub destination_prefix: Option<String>
}


/// struct for typed errors of method [`fetch_verification_attempts_summary`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchVerificationAttemptsSummaryError {
    UnknownValue(serde_json::Value),
}


/// Get a summary of how many attempts were made and how many were converted.
pub async fn fetch_verification_attempts_summary(configuration: &configuration::Configuration, params: FetchVerificationAttemptsSummaryParams) -> Result<models::VerifyV2VerificationAttemptsSummary, Error<FetchVerificationAttemptsSummaryError>> {

    let uri_str = format!("{}/v2/Attempts/Summary", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.verify_service_sid {
        req_builder = req_builder.query(&[("VerifyServiceSid", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.date_created_after {
        req_builder = req_builder.query(&[("DateCreatedAfter", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.date_created_before {
        req_builder = req_builder.query(&[("DateCreatedBefore", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.country {
        req_builder = req_builder.query(&[("Country", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.channel {
        req_builder = req_builder.query(&[("Channel", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.destination_prefix {
        req_builder = req_builder.query(&[("DestinationPrefix", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::VerifyV2VerificationAttemptsSummary`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::VerifyV2VerificationAttemptsSummary`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchVerificationAttemptsSummaryError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

